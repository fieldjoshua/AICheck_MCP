#!/bin/bash
# AICheck Pre-push Hook
# Ensures tests pass and routers are properly registered before pushing

set -e

echo "AICheck Pre-push Hook: Running verification checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to detect project type
detect_project_type() {
    if [ -f "pyproject.toml" ] || [ -f "requirements.txt" ]; then
        echo "python"
    elif [ -f "package.json" ]; then
        echo "node"
    else
        echo "unknown"
    fi
}

# Function to run tests based on project type
run_tests() {
    local project_type=$1
    
    case $project_type in
        python)
            echo "Running Python tests..."
            if [ -f "pyproject.toml" ] && command -v poetry >/dev/null 2>&1; then
                poetry run pytest -q || return 1
            elif [ -f "requirements.txt" ] && command -v pytest >/dev/null 2>&1; then
                pytest -q || return 1
            else
                echo -e "${YELLOW}Warning: No Python test runner found${NC}"
                return 0
            fi
            ;;
        node)
            echo "Running Node.js tests..."
            if [ -f "package.json" ]; then
                npm test || return 1
            else
                echo -e "${YELLOW}Warning: No package.json found${NC}"
                return 0
            fi
            ;;
        *)
            echo -e "${YELLOW}Warning: Unknown project type, skipping tests${NC}"
            return 0
            ;;
    esac
}

# Function to check for router verification script
check_routers() {
    if [ -f "scripts/check_all_routers.py" ]; then
        echo "Verifying router registration..."
        python3 scripts/check_all_routers.py || return 1
    elif [ -f ".aicheck/scripts/verify_routers.py" ]; then
        echo "Verifying router registration..."
        python3 .aicheck/scripts/verify_routers.py || return 1
    else
        # No router verification script found, which is fine for non-API projects
        return 0
    fi
}

# Function to check for uncommitted dependency changes
check_dependencies() {
    local project_type=$1
    
    case $project_type in
        python)
            if [ -f "pyproject.toml" ]; then
                if git diff --name-only | grep -q "pyproject.toml\|poetry.lock"; then
                    echo -e "${YELLOW}Warning: Uncommitted changes to dependency files${NC}"
                    echo "Please commit pyproject.toml and poetry.lock changes"
                    return 1
                fi
            fi
            ;;
        node)
            if [ -f "package.json" ]; then
                if git diff --name-only | grep -q "package.json\|package-lock.json\|yarn.lock"; then
                    echo -e "${YELLOW}Warning: Uncommitted changes to dependency files${NC}"
                    echo "Please commit package.json and lock file changes"
                    return 1
                fi
            fi
            ;;
    esac
    return 0
}

# Main execution
main() {
    local project_type=$(detect_project_type)
    echo "Detected project type: $project_type"
    
    # Check for uncommitted dependency changes
    if ! check_dependencies "$project_type"; then
        echo -e "${RED}Pre-push hook failed: Uncommitted dependency changes${NC}"
        exit 1
    fi
    
    # Run tests
    if ! run_tests "$project_type"; then
        echo -e "${RED}Pre-push hook failed: Tests did not pass${NC}"
        exit 1
    fi
    
    # Check routers (for API projects)
    if ! check_routers; then
        echo -e "${RED}Pre-push hook failed: Router verification failed${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}All pre-push checks passed!${NC}"
}

# Run main function
main