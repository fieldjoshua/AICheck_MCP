#!/bin/bash

# AICheck pre-commit hook
# Helps maintain compliance without being too restrictive

GREEN="\033[0;32m"
NEON_BLURPLE="\033[38;5;99m"      # Neon blurple highlight color
BRIGHT_BLURPLE="\033[38;5;135m"   # Bright blurple for text
YELLOW="\033[0;33m"
RED="\033[0;31m"
CYAN="\033[0;36m"
NC="\033[0m" # No Color

# Get current action
CURRENT_ACTION=""
if [ -f ".aicheck/current_action" ]; then
  CURRENT_ACTION=$(cat .aicheck/current_action)
fi

# Get list of files being committed
FILES=$(git diff --cached --name-only --diff-filter=ACM)

# 1. Check commit message format (run during commit-msg hook, but check staged files here)
echo -e "${BRIGHT_BLURPLE}Analyzing staged changes...${NC}"

# 2. Check for dependency changes
DEPENDENCY_CHANGES=0
for file in $FILES; do
  # Look for dependency-related imports in code files
  if [[ $file == *.py ]]; then
    if grep -q "^import " "$file" || grep -q "^from .* import " "$file"; then
      # Python imports found
      DEPENDENCY_CHANGES=1
    fi
  elif [[ $file == *.js || $file == *.ts || $file == *.jsx || $file == *.tsx ]]; then
    if grep -q "^import " "$file" || grep -q "require(" "$file"; then
      # JS/TS imports found
      DEPENDENCY_CHANGES=1
    fi
  elif [[ $file == *package.json || $file == *requirements.txt || $file == *Gemfile || $file == *pom.xml || $file == *build.gradle ]]; then
    # Dependency manifests
    DEPENDENCY_CHANGES=1
  fi
done

if [ $DEPENDENCY_CHANGES -eq 1 ] && [ -f "documentation/dependencies/dependency_index.md" ]; then
  # Check if dependency index has been updated in this commit
  if ! git diff --cached --name-only | grep -q "documentation/dependencies/dependency_index.md"; then
    echo -e "${YELLOW}WARNING: Dependency changes detected, but dependency_index.md not updated.${NC}"
    echo -e "${YELLOW}Consider running:\n  ./aicheck dependency add NAME VERSION JUSTIFICATION${NC}"
    echo ""
    # Not blocking the commit, just a friendly reminder
  fi
fi

# 3. Check for file organization - if changing action files but not in active action
if [ -n "$CURRENT_ACTION" ] && [ "$CURRENT_ACTION" != "None" ] && [ "$CURRENT_ACTION" != "AICheckExec" ]; then
  # Convert PascalCase to kebab-case
  ACTION_DIR=$(echo "$CURRENT_ACTION" | sed -r 's/([a-z0-9])([A-Z])/\1-\2/g' | tr '[:upper:]' '[:lower:]')
  
  if echo "$FILES" | grep -q "\.aicheck/actions/" && ! echo "$FILES" | grep -q "\.aicheck/actions/$ACTION_DIR/"; then
    echo -e "${YELLOW}WARNING: Modifying action files outside current action ($CURRENT_ACTION)${NC}"
    echo -e "${YELLOW}Current action directory: .aicheck/actions/$ACTION_DIR/${NC}"
    echo -e "${YELLOW}Use ./aicheck action set ACTION_NAME to switch actions${NC}"
    echo ""
    # Not blocking the commit, just a friendly reminder
  fi
fi

# 4. Check for test files when implementing functionality
IMPLEMENTATION_FILES=0
TEST_FILES=0

for file in $FILES; do
  if [[ $file == *.py || $file == *.js || $file == *.ts || $file == *.jsx || $file == *.tsx || $file == *.rb || $file == *.go || $file == *.java ]]; then
    if [[ $file != *test* && $file != *spec* ]]; then
      # Implementation file
      IMPLEMENTATION_FILES=1
    fi
  fi
  
  if [[ $file == *test* || $file == *spec* ]]; then
    # Test file
    TEST_FILES=1
  fi
done

if [ $IMPLEMENTATION_FILES -eq 1 ] && [ $TEST_FILES -eq 0 ]; then
  echo -e "${YELLOW}REMINDER: Implementation changes without test updates${NC}"
  echo -e "${YELLOW}AICheck follows test-driven development: tests should be written first${NC}"
  echo -e "${YELLOW}Consider adding tests to verify your implementation${NC}"
  echo ""
  # Not blocking the commit, just a friendly reminder
fi

# Always allow the commit to proceed - these are helpful warnings, not blockers
exit 0
